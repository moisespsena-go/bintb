// Code generated by xbindata. DO NOT EDIT.

// +build !dev

package assets

import (
	"os"
	"sync"
	"strings"
	"github.com/moisespsena-go/io-common"
	"github.com/moisespsena-go/path-helpers"
	"github.com/moisespsena-go/xbindata/xbfs"
	"github.com/moisespsena-go/xbindata/outlined"
	bc "github.com/moisespsena-go/xbindata/xbcommon"
	br "github.com/moisespsena-go/xbindata/xbreader"
	fsapi "github.com/moisespsena-go/assetfs/assetfsapi"
)

var (
	pkg          = path_helpers.GetCalledDir()
    envName      = "XB_"+strings.NewReplacer("/", "_", ".", "", "-", "").Replace(strings.ToUpper(strings.Replace(pkg, "/go-", "/", -1)))

	_outlined     *outlined.Outlined
	outlinedPaths []string
	outlinedPath  = os.Getenv(envName)
    ended         = os.Getenv(envName+"_ENDED") == "true"

	StartPos int64
	Assets   bc.Assets

	OpenOutlined = br.Open
	OutlinedReaderFactory = func(start, size int64) func() (reader iocommon.ReadSeekCloser, err error) {
		return func() (reader iocommon.ReadSeekCloser, err error) {
			return OpenOutlined(outlinedPath, _outlined.StartPos + start, size)
		}
	}
)

func OutlinedPath() string {
	return outlinedPath
}

func Outlined() (archiv *outlined.Outlined, err error) {
	if _outlined == nil {
        mu.Lock()
		defer mu.Unlock() 

		if _outlined, err = outlined.OpenFile(outlinedPath, ended); err != nil {
			return
		}
	}
	return _outlined, nil
}

func load() {
	if outlinedPath == "" {
       outlinedPath, ended = os.Args[0], true
	}

    Assets.Factory = func() (assets map[string]bc.Asset, err error) {		archiv, err := Outlined()
		if err != nil {
			return nil, err
		}
    
		return archiv.AssetsMap(OutlinedReaderFactory), nil
	}

    fs = xbfs.NewFileSystem(&Assets)
}

var (
    loaded        bool
    mu            sync.Mutex
	fs fsapi.Interface

)
var fsLoadCallbacks []func(fs fsapi.Interface)

func OnFsLoad(cb ...func(fs fsapi.Interface)) {
	fsLoadCallbacks = append(fsLoadCallbacks, cb...)
}

func callFsLoadCallbacks() {
	for _, f := range fsLoadCallbacks {
		f(fs)
	}
}

func FS() fsapi.Interface {
	Load()
	return fs
}
func Load() {
    if loaded { return }
	mu.Lock()
	if loaded { mu.Unlock(); return }
	defer callFsLoadCallbacks()
	defer mu.Unlock()
	defer func() { loaded = true }()
	load()
}

func init() { Load() }
